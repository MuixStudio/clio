// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	// CreateUser creates a single user. Password is required for local accounts.
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	// CreateUsers creates multiple users in a single batch request.
	CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...client.CallOption) (*CreateUsersResponse, error)
	// FindUserByID returns a single user by unique ID.
	FindUserByID(ctx context.Context, in *FindUserByIDRequest, opts ...client.CallOption) (*FindUserByIDResponse, error)
	// FindUsersByIDs returns multiple users by their unique IDs.
	FindUsersByIDs(ctx context.Context, in *FindUsersByIDsRequest, opts ...client.CallOption) (*FindUsersByIDsResponse, error)
	// FindUsersByName performs a fuzzy search by display name with pagination.
	FindUsersByName(ctx context.Context, in *FindUsersByNameRequest, opts ...client.CallOption) (*FindUsersByNameResponse, error)
	// FindUsers performs a composite search with optional filters and pagination.
	FindUsers(ctx context.Context, in *FindUsersRequest, opts ...client.CallOption) (*FindUsersResponse, error)
	// VerifyPassword validates a user's password (local account types only).
	VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...client.CallOption) (*VerifyPasswordResponse, error)
	// DeleteUser deletes a single user by ID.
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	// DeleteUsers deletes multiple users by IDs.
	DeleteUsers(ctx context.Context, in *DeleteUsersRequest, opts ...client.CallOption) (*DeleteUsersResponse, error)
	// UpdateEmail updates a user's email address.
	UpdateEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...client.CallOption) (*UpdateUserEmailResponse, error)
	// UpdateName updates a user's display name.
	UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...client.CallOption) (*UpdateNameResponse, error)
	// UpdateUserName updates a user's unique username.
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error)
	// UpdatePhone updates a user's phone number and country code.
	UpdatePhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...client.CallOption) (*UpdateUserPhoneResponse, error)
	// ChangeAdminStatus updates a user's administrative status.
	ChangeAdminStatus(ctx context.Context, in *ChangeAdminStatusRequest, opts ...client.CallOption) (*ChangeAdminStatusResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...client.CallOption) (*CreateUsersResponse, error) {
	req := c.c.NewRequest(c.name, "User.CreateUsers", in)
	out := new(CreateUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUserByID(ctx context.Context, in *FindUserByIDRequest, opts ...client.CallOption) (*FindUserByIDResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUserByID", in)
	out := new(FindUserByIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUsersByIDs(ctx context.Context, in *FindUsersByIDsRequest, opts ...client.CallOption) (*FindUsersByIDsResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUsersByIDs", in)
	out := new(FindUsersByIDsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUsersByName(ctx context.Context, in *FindUsersByNameRequest, opts ...client.CallOption) (*FindUsersByNameResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUsersByName", in)
	out := new(FindUsersByNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindUsers(ctx context.Context, in *FindUsersRequest, opts ...client.CallOption) (*FindUsersResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindUsers", in)
	out := new(FindUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, opts ...client.CallOption) (*VerifyPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "User.VerifyPassword", in)
	out := new(VerifyPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUsers(ctx context.Context, in *DeleteUsersRequest, opts ...client.CallOption) (*DeleteUsersResponse, error) {
	req := c.c.NewRequest(c.name, "User.DeleteUsers", in)
	out := new(DeleteUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...client.CallOption) (*UpdateUserEmailResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateEmail", in)
	out := new(UpdateUserEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateName(ctx context.Context, in *UpdateNameRequest, opts ...client.CallOption) (*UpdateNameResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateName", in)
	out := new(UpdateNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserName", in)
	out := new(UpdateUserNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdatePhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...client.CallOption) (*UpdateUserPhoneResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdatePhone", in)
	out := new(UpdateUserPhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) ChangeAdminStatus(ctx context.Context, in *ChangeAdminStatusRequest, opts ...client.CallOption) (*ChangeAdminStatusResponse, error) {
	req := c.c.NewRequest(c.name, "User.ChangeAdminStatus", in)
	out := new(ChangeAdminStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// CreateUser creates a single user. Password is required for local accounts.
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	// CreateUsers creates multiple users in a single batch request.
	CreateUsers(context.Context, *CreateUsersRequest, *CreateUsersResponse) error
	// FindUserByID returns a single user by unique ID.
	FindUserByID(context.Context, *FindUserByIDRequest, *FindUserByIDResponse) error
	// FindUsersByIDs returns multiple users by their unique IDs.
	FindUsersByIDs(context.Context, *FindUsersByIDsRequest, *FindUsersByIDsResponse) error
	// FindUsersByName performs a fuzzy search by display name with pagination.
	FindUsersByName(context.Context, *FindUsersByNameRequest, *FindUsersByNameResponse) error
	// FindUsers performs a composite search with optional filters and pagination.
	FindUsers(context.Context, *FindUsersRequest, *FindUsersResponse) error
	// VerifyPassword validates a user's password (local account types only).
	VerifyPassword(context.Context, *VerifyPasswordRequest, *VerifyPasswordResponse) error
	// DeleteUser deletes a single user by ID.
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	// DeleteUsers deletes multiple users by IDs.
	DeleteUsers(context.Context, *DeleteUsersRequest, *DeleteUsersResponse) error
	// UpdateEmail updates a user's email address.
	UpdateEmail(context.Context, *UpdateUserEmailRequest, *UpdateUserEmailResponse) error
	// UpdateName updates a user's display name.
	UpdateName(context.Context, *UpdateNameRequest, *UpdateNameResponse) error
	// UpdateUserName updates a user's unique username.
	UpdateUserName(context.Context, *UpdateUserNameRequest, *UpdateUserNameResponse) error
	// UpdatePhone updates a user's phone number and country code.
	UpdatePhone(context.Context, *UpdateUserPhoneRequest, *UpdateUserPhoneResponse) error
	// ChangeAdminStatus updates a user's administrative status.
	ChangeAdminStatus(context.Context, *ChangeAdminStatusRequest, *ChangeAdminStatusResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		CreateUsers(ctx context.Context, in *CreateUsersRequest, out *CreateUsersResponse) error
		FindUserByID(ctx context.Context, in *FindUserByIDRequest, out *FindUserByIDResponse) error
		FindUsersByIDs(ctx context.Context, in *FindUsersByIDsRequest, out *FindUsersByIDsResponse) error
		FindUsersByName(ctx context.Context, in *FindUsersByNameRequest, out *FindUsersByNameResponse) error
		FindUsers(ctx context.Context, in *FindUsersRequest, out *FindUsersResponse) error
		VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, out *VerifyPasswordResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
		DeleteUsers(ctx context.Context, in *DeleteUsersRequest, out *DeleteUsersResponse) error
		UpdateEmail(ctx context.Context, in *UpdateUserEmailRequest, out *UpdateUserEmailResponse) error
		UpdateName(ctx context.Context, in *UpdateNameRequest, out *UpdateNameResponse) error
		UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error
		UpdatePhone(ctx context.Context, in *UpdateUserPhoneRequest, out *UpdateUserPhoneResponse) error
		ChangeAdminStatus(ctx context.Context, in *ChangeAdminStatusRequest, out *ChangeAdminStatusResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.UserHandler.CreateUser(ctx, in, out)
}

func (h *userHandler) CreateUsers(ctx context.Context, in *CreateUsersRequest, out *CreateUsersResponse) error {
	return h.UserHandler.CreateUsers(ctx, in, out)
}

func (h *userHandler) FindUserByID(ctx context.Context, in *FindUserByIDRequest, out *FindUserByIDResponse) error {
	return h.UserHandler.FindUserByID(ctx, in, out)
}

func (h *userHandler) FindUsersByIDs(ctx context.Context, in *FindUsersByIDsRequest, out *FindUsersByIDsResponse) error {
	return h.UserHandler.FindUsersByIDs(ctx, in, out)
}

func (h *userHandler) FindUsersByName(ctx context.Context, in *FindUsersByNameRequest, out *FindUsersByNameResponse) error {
	return h.UserHandler.FindUsersByName(ctx, in, out)
}

func (h *userHandler) FindUsers(ctx context.Context, in *FindUsersRequest, out *FindUsersResponse) error {
	return h.UserHandler.FindUsers(ctx, in, out)
}

func (h *userHandler) VerifyPassword(ctx context.Context, in *VerifyPasswordRequest, out *VerifyPasswordResponse) error {
	return h.UserHandler.VerifyPassword(ctx, in, out)
}

func (h *userHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UserHandler.DeleteUser(ctx, in, out)
}

func (h *userHandler) DeleteUsers(ctx context.Context, in *DeleteUsersRequest, out *DeleteUsersResponse) error {
	return h.UserHandler.DeleteUsers(ctx, in, out)
}

func (h *userHandler) UpdateEmail(ctx context.Context, in *UpdateUserEmailRequest, out *UpdateUserEmailResponse) error {
	return h.UserHandler.UpdateEmail(ctx, in, out)
}

func (h *userHandler) UpdateName(ctx context.Context, in *UpdateNameRequest, out *UpdateNameResponse) error {
	return h.UserHandler.UpdateName(ctx, in, out)
}

func (h *userHandler) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error {
	return h.UserHandler.UpdateUserName(ctx, in, out)
}

func (h *userHandler) UpdatePhone(ctx context.Context, in *UpdateUserPhoneRequest, out *UpdateUserPhoneResponse) error {
	return h.UserHandler.UpdatePhone(ctx, in, out)
}

func (h *userHandler) ChangeAdminStatus(ctx context.Context, in *ChangeAdminStatusRequest, out *ChangeAdminStatusResponse) error {
	return h.UserHandler.ChangeAdminStatus(ctx, in, out)
}
