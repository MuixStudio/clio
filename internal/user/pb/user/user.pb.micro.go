// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	// 创建用户
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	// 根据用户ID查找指定用户
	FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, opts ...client.CallOption) (*FindSingleUserByUserIDResponse, error)
	// 根据用户名密码查找指定用户
	FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, opts ...client.CallOption) (*FindSingleUserByUsernameAndPasswordResponse, error)
	// 查找所有用户
	FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...client.CallOption) (*FindAllUserResponse, error)
	// 删除用户
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error)
	// 更新用户信息（包括邮箱、用户名称等）
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...client.CallOption) (*UpdateUserInfoResponse, error)
	// 更新用户邮箱
	UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...client.CallOption) (*UpdateUserEmailResponse, error)
	// 更新用户名称
	UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error)
	// 更新用户手机号
	UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...client.CallOption) (*UpdateUserPhoneResponse, error)
	// 更新用户员工号
	UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...client.CallOption) (*UpdateUserEmployeeNumberResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, opts ...client.CallOption) (*FindSingleUserByUserIDResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindSingleUserByUserID", in)
	out := new(FindSingleUserByUserIDResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, opts ...client.CallOption) (*FindSingleUserByUsernameAndPasswordResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindSingleUserByUsernameAndPassword", in)
	out := new(FindSingleUserByUsernameAndPasswordResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) FindAllUser(ctx context.Context, in *FindAllUserRequest, opts ...client.CallOption) (*FindAllUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.FindAllUser", in)
	out := new(FindAllUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	req := c.c.NewRequest(c.name, "User.DeleteUser", in)
	out := new(DeleteUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, opts ...client.CallOption) (*UpdateUserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserInfo", in)
	out := new(UpdateUserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, opts ...client.CallOption) (*UpdateUserEmailResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserEmail", in)
	out := new(UpdateUserEmailResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, opts ...client.CallOption) (*UpdateUserNameResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserName", in)
	out := new(UpdateUserNameResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, opts ...client.CallOption) (*UpdateUserPhoneResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserPhone", in)
	out := new(UpdateUserPhoneResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, opts ...client.CallOption) (*UpdateUserEmployeeNumberResponse, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserEmployeeNumber", in)
	out := new(UpdateUserEmployeeNumberResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	// 创建用户
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	// 根据用户ID查找指定用户
	FindSingleUserByUserID(context.Context, *FindSingleUserByUserIDRequest, *FindSingleUserByUserIDResponse) error
	// 根据用户名密码查找指定用户
	FindSingleUserByUsernameAndPassword(context.Context, *FindSingleUserByUsernameAndPasswordRequest, *FindSingleUserByUsernameAndPasswordResponse) error
	// 查找所有用户
	FindAllUser(context.Context, *FindAllUserRequest, *FindAllUserResponse) error
	// 删除用户
	DeleteUser(context.Context, *DeleteUserRequest, *DeleteUserResponse) error
	// 更新用户信息（包括邮箱、用户名称等）
	UpdateUserInfo(context.Context, *UpdateUserInfoRequest, *UpdateUserInfoResponse) error
	// 更新用户邮箱
	UpdateUserEmail(context.Context, *UpdateUserEmailRequest, *UpdateUserEmailResponse) error
	// 更新用户名称
	UpdateUserName(context.Context, *UpdateUserNameRequest, *UpdateUserNameResponse) error
	// 更新用户手机号
	UpdateUserPhone(context.Context, *UpdateUserPhoneRequest, *UpdateUserPhoneResponse) error
	// 更新用户员工号
	UpdateUserEmployeeNumber(context.Context, *UpdateUserEmployeeNumberRequest, *UpdateUserEmployeeNumberResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, out *FindSingleUserByUserIDResponse) error
		FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, out *FindSingleUserByUsernameAndPasswordResponse) error
		FindAllUser(ctx context.Context, in *FindAllUserRequest, out *FindAllUserResponse) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error
		UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, out *UpdateUserInfoResponse) error
		UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, out *UpdateUserEmailResponse) error
		UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error
		UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, out *UpdateUserPhoneResponse) error
		UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, out *UpdateUserEmployeeNumberResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.UserHandler.CreateUser(ctx, in, out)
}

func (h *userHandler) FindSingleUserByUserID(ctx context.Context, in *FindSingleUserByUserIDRequest, out *FindSingleUserByUserIDResponse) error {
	return h.UserHandler.FindSingleUserByUserID(ctx, in, out)
}

func (h *userHandler) FindSingleUserByUsernameAndPassword(ctx context.Context, in *FindSingleUserByUsernameAndPasswordRequest, out *FindSingleUserByUsernameAndPasswordResponse) error {
	return h.UserHandler.FindSingleUserByUsernameAndPassword(ctx, in, out)
}

func (h *userHandler) FindAllUser(ctx context.Context, in *FindAllUserRequest, out *FindAllUserResponse) error {
	return h.UserHandler.FindAllUser(ctx, in, out)
}

func (h *userHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *DeleteUserResponse) error {
	return h.UserHandler.DeleteUser(ctx, in, out)
}

func (h *userHandler) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoRequest, out *UpdateUserInfoResponse) error {
	return h.UserHandler.UpdateUserInfo(ctx, in, out)
}

func (h *userHandler) UpdateUserEmail(ctx context.Context, in *UpdateUserEmailRequest, out *UpdateUserEmailResponse) error {
	return h.UserHandler.UpdateUserEmail(ctx, in, out)
}

func (h *userHandler) UpdateUserName(ctx context.Context, in *UpdateUserNameRequest, out *UpdateUserNameResponse) error {
	return h.UserHandler.UpdateUserName(ctx, in, out)
}

func (h *userHandler) UpdateUserPhone(ctx context.Context, in *UpdateUserPhoneRequest, out *UpdateUserPhoneResponse) error {
	return h.UserHandler.UpdateUserPhone(ctx, in, out)
}

func (h *userHandler) UpdateUserEmployeeNumber(ctx context.Context, in *UpdateUserEmployeeNumberRequest, out *UpdateUserEmployeeNumberResponse) error {
	return h.UserHandler.UpdateUserEmployeeNumber(ctx, in, out)
}
