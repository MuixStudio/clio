// Code generated by Kitex v0.15.1. DO NOT EDIT.

package user

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	userService "github.com/muixstudio/clio/internal/common/pb/userService"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateUser(ctx context.Context, Req *userService.CreateUserRequest, callOptions ...callopt.Option) (r *userService.CreateUserResponse, err error)
	CreateUsers(ctx context.Context, Req *userService.CreateUsersRequest, callOptions ...callopt.Option) (r *userService.CreateUsersResponse, err error)
	FindUserByID(ctx context.Context, Req *userService.FindUserByIDRequest, callOptions ...callopt.Option) (r *userService.FindUserByIDResponse, err error)
	FindUsersByIDs(ctx context.Context, Req *userService.FindUsersByIDsRequest, callOptions ...callopt.Option) (r *userService.FindUsersByIDsResponse, err error)
	FindUsersByName(ctx context.Context, Req *userService.FindUsersByNameRequest, callOptions ...callopt.Option) (r *userService.FindUsersByNameResponse, err error)
	FindUsers(ctx context.Context, Req *userService.FindUsersRequest, callOptions ...callopt.Option) (r *userService.FindUsersResponse, err error)
	VerifyPassword(ctx context.Context, Req *userService.VerifyPasswordRequest, callOptions ...callopt.Option) (r *userService.VerifyPasswordResponse, err error)
	DeleteUser(ctx context.Context, Req *userService.DeleteUserRequest, callOptions ...callopt.Option) (r *userService.DeleteUserResponse, err error)
	DeleteUsers(ctx context.Context, Req *userService.DeleteUsersRequest, callOptions ...callopt.Option) (r *userService.DeleteUsersResponse, err error)
	UpdateEmail(ctx context.Context, Req *userService.UpdateUserEmailRequest, callOptions ...callopt.Option) (r *userService.UpdateUserEmailResponse, err error)
	UpdateName(ctx context.Context, Req *userService.UpdateNameRequest, callOptions ...callopt.Option) (r *userService.UpdateNameResponse, err error)
	UpdateUserName(ctx context.Context, Req *userService.UpdateUserNameRequest, callOptions ...callopt.Option) (r *userService.UpdateUserNameResponse, err error)
	UpdatePhone(ctx context.Context, Req *userService.UpdateUserPhoneRequest, callOptions ...callopt.Option) (r *userService.UpdateUserPhoneResponse, err error)
	ChangeAdminStatus(ctx context.Context, Req *userService.ChangeAdminStatusRequest, callOptions ...callopt.Option) (r *userService.ChangeAdminStatusResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserClient struct {
	*kClient
}

func (p *kUserClient) CreateUser(ctx context.Context, Req *userService.CreateUserRequest, callOptions ...callopt.Option) (r *userService.CreateUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUser(ctx, Req)
}

func (p *kUserClient) CreateUsers(ctx context.Context, Req *userService.CreateUsersRequest, callOptions ...callopt.Option) (r *userService.CreateUsersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateUsers(ctx, Req)
}

func (p *kUserClient) FindUserByID(ctx context.Context, Req *userService.FindUserByIDRequest, callOptions ...callopt.Option) (r *userService.FindUserByIDResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindUserByID(ctx, Req)
}

func (p *kUserClient) FindUsersByIDs(ctx context.Context, Req *userService.FindUsersByIDsRequest, callOptions ...callopt.Option) (r *userService.FindUsersByIDsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindUsersByIDs(ctx, Req)
}

func (p *kUserClient) FindUsersByName(ctx context.Context, Req *userService.FindUsersByNameRequest, callOptions ...callopt.Option) (r *userService.FindUsersByNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindUsersByName(ctx, Req)
}

func (p *kUserClient) FindUsers(ctx context.Context, Req *userService.FindUsersRequest, callOptions ...callopt.Option) (r *userService.FindUsersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FindUsers(ctx, Req)
}

func (p *kUserClient) VerifyPassword(ctx context.Context, Req *userService.VerifyPasswordRequest, callOptions ...callopt.Option) (r *userService.VerifyPasswordResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VerifyPassword(ctx, Req)
}

func (p *kUserClient) DeleteUser(ctx context.Context, Req *userService.DeleteUserRequest, callOptions ...callopt.Option) (r *userService.DeleteUserResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteUser(ctx, Req)
}

func (p *kUserClient) DeleteUsers(ctx context.Context, Req *userService.DeleteUsersRequest, callOptions ...callopt.Option) (r *userService.DeleteUsersResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteUsers(ctx, Req)
}

func (p *kUserClient) UpdateEmail(ctx context.Context, Req *userService.UpdateUserEmailRequest, callOptions ...callopt.Option) (r *userService.UpdateUserEmailResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateEmail(ctx, Req)
}

func (p *kUserClient) UpdateName(ctx context.Context, Req *userService.UpdateNameRequest, callOptions ...callopt.Option) (r *userService.UpdateNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateName(ctx, Req)
}

func (p *kUserClient) UpdateUserName(ctx context.Context, Req *userService.UpdateUserNameRequest, callOptions ...callopt.Option) (r *userService.UpdateUserNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateUserName(ctx, Req)
}

func (p *kUserClient) UpdatePhone(ctx context.Context, Req *userService.UpdateUserPhoneRequest, callOptions ...callopt.Option) (r *userService.UpdateUserPhoneResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdatePhone(ctx, Req)
}

func (p *kUserClient) ChangeAdminStatus(ctx context.Context, Req *userService.ChangeAdminStatusRequest, callOptions ...callopt.Option) (r *userService.ChangeAdminStatusResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangeAdminStatus(ctx, Req)
}
