// Code generated by Kitex v0.15.1. DO NOT EDIT.

package userService

import (
	"context"

	"github.com/cloudwego/prutal"
)

// UserItem represents the immutable and mutable properties of a user entity.
// Optional fields may be absent if not set or not applicable.
type UserItem struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                  // Unique user ID (server-generated)
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`               // Display name (human-readable)
	UserName    string `protobuf:"bytes,3,opt,name=userName" json:"userName,omitempty"`       // Unique username (login-friendly)
	CountryCode string `protobuf:"bytes,4,opt,name=countryCode" json:"countryCode,omitempty"` // E.164 country calling code (e.g., "+1", "+86")
	Phone       string `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`             // Phone number without separators; paired with countryCode
	Email       string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`             // Email address (should be RFC 5322 compliant)
	IsAdmin     bool   `protobuf:"varint,7,opt,name=isAdmin" json:"isAdmin,omitempty"`        // Administrative privilege flag
}

func (x *UserItem) Reset() { *x = UserItem{} }

func (x *UserItem) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UserItem) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UserItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserItem) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserItem) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UserItem) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UserItem) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserItem) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

// CreateUserRequest creates a single user with optional phone attributes.
// Security note: password must be transmitted over TLS; do not log raw password.
type CreateUserRequest struct {
	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`               // Display name
	UserName    *string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`       // Unique username
	Password    *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`       // Required for local accounts
	CountryCode *string `protobuf:"bytes,4,opt,name=countryCode" json:"countryCode,omitempty"` // E.164 country code (e.g., "+1")
	Phone       *string `protobuf:"bytes,5,opt,name=phone" json:"phone,omitempty"`             // Phone number paired with countryCode
	Email       *string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`             // Email address
	IsAdmin     *bool   `protobuf:"varint,7,opt,name=isAdmin" json:"isAdmin,omitempty"`        // Initial admin status (restricted usage recommended)
}

func (x *CreateUserRequest) Reset() { *x = CreateUserRequest{} }

func (x *CreateUserRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateUserRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateUserRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CreateUserRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *CreateUserRequest) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *CreateUserRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *CreateUserRequest) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *CreateUserRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *CreateUserRequest) GetIsAdmin() bool {
	if x != nil && x.IsAdmin != nil {
		return *x.IsAdmin
	}
	return false
}

type CreateUserResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"` // Newly created user ID
}

func (x *CreateUserResponse) Reset() { *x = CreateUserResponse{} }

func (x *CreateUserResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateUserResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateUserResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// CreateUsersRequest creates multiple users in batch.
// Implementations should validate each entry independently and may apply transactional semantics.
type CreateUsersRequest struct {
	Users []*CreateUserRequest `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"` // Users to create
}

func (x *CreateUsersRequest) Reset() { *x = CreateUsersRequest{} }

func (x *CreateUsersRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateUsersRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateUsersRequest) GetUsers() []*CreateUserRequest {
	if x != nil {
		return x.Users
	}
	return nil
}

type CreateUsersResponse struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"` // IDs of successfully created users (order-aligned with input)
}

func (x *CreateUsersResponse) Reset() { *x = CreateUsersResponse{} }

func (x *CreateUsersResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateUsersResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateUsersResponse) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

// FindUserByIDRequest fetches a user by unique ID.
type FindUserByIDRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"` // Target user ID
}

func (x *FindUserByIDRequest) Reset() { *x = FindUserByIDRequest{} }

func (x *FindUserByIDRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FindUserByIDRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUserByIDRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindUserByIDResponse struct {
	User *UserItem `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"` // User record; may be empty if not found depending on implementation
}

func (x *FindUserByIDResponse) Reset() { *x = FindUserByIDResponse{} }

func (x *FindUserByIDResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FindUserByIDResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUserByIDResponse) GetUser() *UserItem {
	if x != nil {
		return x.User
	}
	return nil
}

// FindUsersByIDsRequest fetches multiple users by IDs.
type FindUsersByIDsRequest struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"` // Target user IDs
}

func (x *FindUsersByIDsRequest) Reset() { *x = FindUsersByIDsRequest{} }

func (x *FindUsersByIDsRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *FindUsersByIDsRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUsersByIDsRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type FindUsersByIDsResponse struct {
	Users []*UserItem `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"` // User records found (order not guaranteed)
}

func (x *FindUsersByIDsResponse) Reset() { *x = FindUsersByIDsResponse{} }

func (x *FindUsersByIDsResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *FindUsersByIDsResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUsersByIDsResponse) GetUsers() []*UserItem {
	if x != nil {
		return x.Users
	}
	return nil
}

// FindUsersByNameRequest performs a fuzzy search by display name.
// Pagination: page starts from 1. pageSize should be a positive integer.
// Implementations may enforce maximum pageSize limits.
type FindUsersByNameRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`          // Name keyword for fuzzy matching
	Page     int32  `protobuf:"varint,2,opt,name=page" json:"page,omitempty"`         // Page index (1-based)
	PageSize int32  `protobuf:"varint,3,opt,name=pageSize" json:"pageSize,omitempty"` // Items per page
}

func (x *FindUsersByNameRequest) Reset() { *x = FindUsersByNameRequest{} }

func (x *FindUsersByNameRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *FindUsersByNameRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUsersByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FindUsersByNameRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindUsersByNameRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FindUsersByNameResponse struct {
	Users []*UserItem `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`  // Page of matched users
	Total int64       `protobuf:"varint,2,opt,name=total" json:"total,omitempty"` // Total number of matched records across all pages
}

func (x *FindUsersByNameResponse) Reset() { *x = FindUsersByNameResponse{} }

func (x *FindUsersByNameResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *FindUsersByNameResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUsersByNameResponse) GetUsers() []*UserItem {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *FindUsersByNameResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// FindUsersRequest performs a composite search across multiple optional filters.
// Any combination of the optional fields may be provided. Pagination: page is 1-based.
type FindUsersRequest struct {
	Name        *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`               // Display name (fuzzy match)
	UserName    *string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`       // Username (exact or fuzzy per implementation)
	Email       *string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`             // Email address (exact or fuzzy per implementation)
	Phone       *string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`             // Phone number
	CountryCode *string `protobuf:"bytes,5,opt,name=countryCode" json:"countryCode,omitempty"` // Country dialing code
	IsAdmin     *bool   `protobuf:"varint,6,opt,name=isAdmin" json:"isAdmin,omitempty"`        // Filter by admin status
	Page        int32   `protobuf:"varint,7,opt,name=page" json:"page,omitempty"`              // Page index (1-based)
	PageSize    int32   `protobuf:"varint,8,opt,name=pageSize" json:"pageSize,omitempty"`      // Items per page (positive integer)
}

func (x *FindUsersRequest) Reset() { *x = FindUsersRequest{} }

func (x *FindUsersRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FindUsersRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUsersRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FindUsersRequest) GetUserName() string {
	if x != nil && x.UserName != nil {
		return *x.UserName
	}
	return ""
}

func (x *FindUsersRequest) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *FindUsersRequest) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

func (x *FindUsersRequest) GetCountryCode() string {
	if x != nil && x.CountryCode != nil {
		return *x.CountryCode
	}
	return ""
}

func (x *FindUsersRequest) GetIsAdmin() bool {
	if x != nil && x.IsAdmin != nil {
		return *x.IsAdmin
	}
	return false
}

func (x *FindUsersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindUsersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FindUsersResponse struct {
	Users []*UserItem `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`  // Page of matched users
	Total int64       `protobuf:"varint,2,opt,name=total" json:"total,omitempty"` // Total number of matched records across all pages
}

func (x *FindUsersResponse) Reset() { *x = FindUsersResponse{} }

func (x *FindUsersResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *FindUsersResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *FindUsersResponse) GetUsers() []*UserItem {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *FindUsersResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// VerifyPasswordRequest validates credentials for local users.
// Security note: must be sent only over TLS; avoid logging sensitive fields.
type VerifyPasswordRequest struct {
	UserName string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"` // Username to verify
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"` // Plaintext password (to be hashed server-side)
}

func (x *VerifyPasswordRequest) Reset() { *x = VerifyPasswordRequest{} }

func (x *VerifyPasswordRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *VerifyPasswordRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VerifyPasswordRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *VerifyPasswordRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VerifyPasswordResponse struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`         // True if credentials are valid
	UserID uint64 `protobuf:"varint,2,opt,name=userID" json:"userID,omitempty"` // Returned when ok=true: authenticated user ID
}

func (x *VerifyPasswordResponse) Reset() { *x = VerifyPasswordResponse{} }

func (x *VerifyPasswordResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *VerifyPasswordResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *VerifyPasswordResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *VerifyPasswordResponse) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

// DeleteUserRequest deletes a single user by ID.
type DeleteUserRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"` // User ID to delete
}

func (x *DeleteUserRequest) Reset() { *x = DeleteUserRequest{} }

func (x *DeleteUserRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DeleteUserRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteUserRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteUserResponse struct {
} // Empty on success

func (x *DeleteUserResponse) Reset() { *x = DeleteUserResponse{} }

func (x *DeleteUserResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DeleteUserResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

// DeleteUsersRequest deletes multiple users by IDs.
type DeleteUsersRequest struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids" json:"ids,omitempty"` // User IDs to delete
}

func (x *DeleteUsersRequest) Reset() { *x = DeleteUsersRequest{} }

func (x *DeleteUsersRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DeleteUsersRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteUsersRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteUsersResponse struct {
	DeletedRecords int64 `protobuf:"varint,1,opt,name=deletedRecords" json:"deletedRecords,omitempty"` // Number of records actually deleted
}

func (x *DeleteUsersResponse) Reset() { *x = DeleteUsersResponse{} }

func (x *DeleteUsersResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DeleteUsersResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteUsersResponse) GetDeletedRecords() int64 {
	if x != nil {
		return x.DeletedRecords
	}
	return 0
}

// UpdateUserEmailRequest updates the email of a specific user.
type UpdateUserEmailRequest struct {
	Id    uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`      // Target user ID
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"` // New email address
}

func (x *UpdateUserEmailRequest) Reset() { *x = UpdateUserEmailRequest{} }

func (x *UpdateUserEmailRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UpdateUserEmailRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateUserEmailRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UpdateUserEmailResponse struct {
} // Empty on success

func (x *UpdateUserEmailResponse) Reset() { *x = UpdateUserEmailResponse{} }

func (x *UpdateUserEmailResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UpdateUserEmailResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

// UpdateNameRequest updates the display name of a specific user.
type UpdateNameRequest struct {
	Id   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`    // Target user ID
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"` // New display name
}

func (x *UpdateNameRequest) Reset() { *x = UpdateNameRequest{} }

func (x *UpdateNameRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateNameRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateNameRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type UpdateNameResponse struct {
} // Empty on success

func (x *UpdateNameResponse) Reset() { *x = UpdateNameResponse{} }

func (x *UpdateNameResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateNameResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

// UpdateUserNameRequest updates the unique username of a specific user.
type UpdateUserNameRequest struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`            // Target user ID
	UserName string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"` // New unique username
}

func (x *UpdateUserNameRequest) Reset() { *x = UpdateUserNameRequest{} }

func (x *UpdateUserNameRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UpdateUserNameRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateUserNameRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserNameRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UpdateUserNameResponse struct {
} // Empty on success

func (x *UpdateUserNameResponse) Reset() { *x = UpdateUserNameResponse{} }

func (x *UpdateUserNameResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UpdateUserNameResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

// UpdateUserPhoneRequest updates the user's phone number and country code together.
type UpdateUserPhoneRequest struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`                  // Target user ID
	CountryCode string `protobuf:"bytes,2,opt,name=countryCode" json:"countryCode,omitempty"` // E.164 country code (e.g., "+1")
	Phone       string `protobuf:"bytes,3,opt,name=phone" json:"phone,omitempty"`             // Phone number without separators
}

func (x *UpdateUserPhoneRequest) Reset() { *x = UpdateUserPhoneRequest{} }

func (x *UpdateUserPhoneRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UpdateUserPhoneRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateUserPhoneRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateUserPhoneRequest) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *UpdateUserPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type UpdateUserPhoneResponse struct {
} // Empty on success

func (x *UpdateUserPhoneResponse) Reset() { *x = UpdateUserPhoneResponse{} }

func (x *UpdateUserPhoneResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *UpdateUserPhoneResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

// ChangeAdminStatusRequest toggles a user's administrative privilege.
// Note: field numbering preserves existing layout; only id and isAdmin are used.
type ChangeAdminStatusRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`           // Target user ID
	IsAdmin bool   `protobuf:"varint,6,opt,name=isAdmin" json:"isAdmin,omitempty"` // Desired admin status
}

func (x *ChangeAdminStatusRequest) Reset() { *x = ChangeAdminStatusRequest{} }

func (x *ChangeAdminStatusRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ChangeAdminStatusRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ChangeAdminStatusRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChangeAdminStatusRequest) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

type ChangeAdminStatusResponse struct {
} // Empty on success

func (x *ChangeAdminStatusResponse) Reset() { *x = ChangeAdminStatusResponse{} }

func (x *ChangeAdminStatusResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *ChangeAdminStatusResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

type User interface {
	CreateUser(ctx context.Context, req *CreateUserRequest) (res *CreateUserResponse, err error)
	CreateUsers(ctx context.Context, req *CreateUsersRequest) (res *CreateUsersResponse, err error)
	FindUserByID(ctx context.Context, req *FindUserByIDRequest) (res *FindUserByIDResponse, err error)
	FindUsersByIDs(ctx context.Context, req *FindUsersByIDsRequest) (res *FindUsersByIDsResponse, err error)
	FindUsersByName(ctx context.Context, req *FindUsersByNameRequest) (res *FindUsersByNameResponse, err error)
	FindUsers(ctx context.Context, req *FindUsersRequest) (res *FindUsersResponse, err error)
	VerifyPassword(ctx context.Context, req *VerifyPasswordRequest) (res *VerifyPasswordResponse, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest) (res *DeleteUserResponse, err error)
	DeleteUsers(ctx context.Context, req *DeleteUsersRequest) (res *DeleteUsersResponse, err error)
	UpdateEmail(ctx context.Context, req *UpdateUserEmailRequest) (res *UpdateUserEmailResponse, err error)
	UpdateName(ctx context.Context, req *UpdateNameRequest) (res *UpdateNameResponse, err error)
	UpdateUserName(ctx context.Context, req *UpdateUserNameRequest) (res *UpdateUserNameResponse, err error)
	UpdatePhone(ctx context.Context, req *UpdateUserPhoneRequest) (res *UpdateUserPhoneResponse, err error)
	ChangeAdminStatus(ctx context.Context, req *ChangeAdminStatusRequest) (res *ChangeAdminStatusResponse, err error)
}
