services:
  api:
    container_name: clio-api
    image: muixstudio/clio-api:0.0.1
    restart: always
    environment:
      MODE: prod
    # depends_on:
    #   user-rpc:
    #     condition: service_healthy

  web:
    container_name: clio-web
    image: muixstudio/clio-web:0.0.1
    restart: always
    environment:
      MODE: prod

  user-rpc:
    container_name: clio-user-rpc
    image: muixstudio/clio-user-rpc:0.0.1
    restart: always
    volumes:
      - ./services/user/etc/default.yaml:/etc/default.yaml
    environment:
      MODE: prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - rpc-services

  db:
    container_name: clio-db
    image: postgres:17.6-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-clio2025}
      POSTGRES_DB: ${POSTGRES_DB:-clio}
      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
    command: >
      postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'
               -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'
               -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'
               -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
               -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD',
          'pg_isready',
          '-h',
          'db',
          '-U',
          '${PGUSER:-postgres}',
          '-d',
          '${POSTGRES_DB:-clio}',
        ]
      interval: 1s
      timeout: 3s
      retries: 60

  redis:
    container_name: clio-redis
    image: redis:8.2.1-alpine
    restart: always
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-clio2025}
    volumes:
      # Mount the redis data directory to the container.
      - ./redis/data:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass ${REDIS_PASSWORD:-clio2025}
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']

  nginx:
    container_name: clio-nginx
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template
      - ./nginx/proxy.conf.template:/etc/nginx/proxy.conf.template
      - ./nginx/https.conf.template:/etc/nginx/https.conf.template
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/entrypoint.sh:/docker-entrypoint.sh
      - ./nginx/ssl:/etc/ssl # cert dir (legacy)
    entrypoint: ['/bin/sh', '/docker-entrypoint.sh']
    environment:
      NGINX_SERVER_NAME: ${NGINX_SERVER_NAME:-_}
      NGINX_HTTPS_ENABLED: ${NGINX_HTTPS_ENABLED:-false}
      NGINX_SSL_PORT: ${NGINX_SSL_PORT:-443}
      NGINX_PORT: ${NGINX_PORT:-80}
      # You're required to add your own SSL certificates/keys to the `./nginx/ssl` directory
      # and modify the env vars below in .env if HTTPS_ENABLED is true.
      NGINX_SSL_CERT_FILENAME: ${NGINX_SSL_CERT_FILENAME:-clio.crt}
      NGINX_SSL_CERT_KEY_FILENAME: ${NGINX_SSL_CERT_KEY_FILENAME:-clio.key}
      NGINX_SSL_PROTOCOLS: ${NGINX_SSL_PROTOCOLS:-TLSv1.1 TLSv1.2 TLSv1.3}
      NGINX_WORKER_PROCESSES: ${NGINX_WORKER_PROCESSES:-auto}
      NGINX_CLIENT_MAX_BODY_SIZE: ${NGINX_CLIENT_MAX_BODY_SIZE:-15M}
      NGINX_KEEPALIVE_TIMEOUT: ${NGINX_KEEPALIVE_TIMEOUT:-65}
      NGINX_PROXY_READ_TIMEOUT: ${NGINX_PROXY_READ_TIMEOUT:-3600s}
      NGINX_PROXY_SEND_TIMEOUT: ${NGINX_PROXY_SEND_TIMEOUT:-3600s}
      NGINX_ENABLE_CERTBOT_CHALLENGE: ${NGINX_ENABLE_CERTBOT_CHALLENGE:-false}
      CERTBOT_DOMAIN: ${CERTBOT_DOMAIN:-}
    depends_on:
      - api
      - web
    ports:
      - '${EXPOSE_NGINX_PORT:-80}:${NGINX_PORT:-80}'
      - '${EXPOSE_NGINX_SSL_PORT:-443}:${NGINX_SSL_PORT:-443}'

  etcd:
    container_name: clio-etcd
    image: bitnami/etcd:3.6.4
    environment:
      ETCD_AUTO_COMPACTION_MODE: ${ETCD_AUTO_COMPACTION_MODE:-revision}
      ETCD_AUTO_COMPACTION_RETENTION: ${ETCD_AUTO_COMPACTION_RETENTION:-1000}
      ETCD_QUOTA_BACKEND_BYTES: ${ETCD_QUOTA_BACKEND_BYTES:-4294967296}
      ETCD_SNAPSHOT_COUNT: ${ETCD_SNAPSHOT_COUNT:-50000}
      ETCD_ROOT_PASSWORD: '${ETCD_ROOT_PASSWORD:-clio2025}'
      ALLOW_NONE_AUTHENTICATION: '${ALLOW_NONE_AUTHENTICATION:-yes}'
      # ETCD_ADVERTISE_CLIENT_URLS: "${ETCD_ADVERTISE_CLIENT_URLS:-http://127.0.0.1:2379}"
      # ETCD_LISTEN_CLIENT_URLS: "${ETCD_LISTEN_CLIENT_URLS:-http://0.0.0.0:2379}"
      # ETCD_DATA_DIR: "${ETCD_DATA_DIR:-/etcd}"
    volumes:
      - ./etcd:/bitnami/etcd
    healthcheck:
      test: ['CMD', 'etcdctl', 'endpoint', 'health']
      interval: 30s
      timeout: 20s
      retries: 3

networks:
  # create a network between sandbox, api and ssrf_proxy, and can not access outside.
  rpc-services:
    driver: bridge
    internal: true
